esphome:
  name: fancontrol
  includes: 
    - itho.h
  libraries: 
    - SPI
    - https://github.com/jodur/ITHO-Lib#NewLib
 
 #Set ID from remotes that are used, so you can identify the root of the last State change
  on_boot:
    then:
      - lambda: |-
          Idlist[0]={"51,40,61","Badkamer"};
          Idlist[1]={"73,82,11","Toilet"};
          Idlist[2]={"ID3","ID3"};
          Mydeviceid="Homeassistant"; 
          rf.setDeviceID(10,87,81); //ID for sending: 10,87,81 was used in old library
          id(swfan_low).turn_on(); //This ensures fan is at low-speed at boot
esp8266:
  board: d1_mini
  framework:
    version: recommended
                    
wifi:
  ssid: <YOURSSID>
  password: <YOURPASSWORD>

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "FALLBACK AP"
    password: "jdsh348201"

captive_portal:

# Enable logging
logger:
#  level: VERBOSE #Enable this line to find out the ID of youre remote

# Enable Home Assistant API
api:

ota:
  on_begin:
    then:
      - lambda: |-
          ESP_LOGI("custom", "Disable Interrupts, to allow OTA without intterupts");
          detachInterrupt(D1);
          delay(500);

switch:
- platform: custom
  lambda: |-
    auto fansendlow = new FanSendLow();
    App.register_component(fansendlow);
    return {fansendlow};

  switches:
    name: "FanSendLow"
    id: swfan_low

- platform: custom
  lambda: |-
    auto fansendmedium = new FanSendMedium();
    App.register_component(fansendmedium);
    return {fansendmedium};

  switches:
    name: "FanSendMedium"
    id: swfan_medium

- platform: custom
  lambda: |-
    auto fansendhigh = new FanSendHigh();
    App.register_component(fansendhigh);
    return {fansendhigh};

  switches:
    name: "FanSendHigh"
    id: swfan_high

- platform: custom
  lambda: |-
    auto fansendt1 = new FanSendIthoTimer1();
    App.register_component(fansendt1);
    return {fansendt1};

  switches:
    name: "FanSendTimer1"

- platform: custom
  lambda: |-
    auto fansendt2 = new FanSendIthoTimer2();
    App.register_component(fansendt2);
    return {fansendt2};

  switches:
    name: "FanSendTimer2"

- platform: custom
  lambda: |-
    auto fansendt3 = new FanSendIthoTimer3();
    App.register_component(fansendt3);
    return {fansendt3};

  switches:
    name: "FanSendTimer3"

- platform: custom
  lambda: |-
    auto fansendjoin = new FanSendIthoJoin();
    App.register_component(fansendjoin);
    return {fansendjoin};
  switches:
    name: "FanSendJoin"

text_sensor:
- platform: custom
  lambda: |-
    auto fanrecv = new FanRecv();
    App.register_component(fanrecv);
    return {fanrecv->fanspeed,fanrecv->fantimer,fanrecv->Lastid};
  text_sensors:
    - name: "fanspeed"
      icon: "mdi:transfer"   
    - name: "fantimer"
      icon: "mdi:timer"  
    - name: "lastid"

fan:
  - platform: speed
    output: outputswitch
    name: "ITHO Fan"
    speed_count: 2
    


output:
  - platform: template
    id: outputswitch
    type: float
    write_action:
      - if:
          condition:
            lambda: return ((state == 0) );
          then:
            - switch.turn_on: swfan_low
      - if:
          condition:
            lambda: return ((state == 0.50) );
          then:
            - switch.turn_on: swfan_medium
      - if:
          condition:
            lambda: return ((state == 1) );
          then:
            - switch.turn_on: swfan_high 
